<?php

namespace App\Exceptions;

use App\Infrastructure\Controller\FormatsApiResponse;
use App\Infrastructure\Lang\Translator;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    use FormatsApiResponse;

    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $exception)
    {
        if ($exception instanceof ModelNotFoundException) {
            $message = Translator::translate('Модель не существует', [
                'model' => Translator::translate("model.{$exception->getModel()}"),
            ]);

            return $this->getSingleErrorResponse($message, 404, [
                'trace' => config('app.debug') ? $exception->getTraceAsString() : '',
            ]);
        }
        return parent::render($request, $exception); // TODO: Change the autogenerated stub
    }
}
